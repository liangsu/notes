1. 搞懂import的解析流程
2. 搞懂bd的具体扫描过程，并整理
3. 整理aop中的几个对象，以及之间的关系
4. aop创建过程

搞懂import的几个类的使用场景


5. 编写一个BeanDefinitionRegistar使用componet能否注册成功，需要查看import解析的代码能否提取到？
答：不能注册成功

spring通过构造方法实例化bean的原理
推断构造方法，
	自动注入：
	手动注入：
		在调用后置处理器第一次推断构造方法
			如果没有提供构造方法，可用的构造方法为null
			如果提供了默认的构造方法，且只有一个，也为null
			提过了多个构造方法，也返回null
			过个构造方法，@auto
			
			
			
有被@Autowire标记的构造方法：
	* 如果有@Autowired(required = true)，则只返回一个，如果有多个则报错
	* 如果没有@Autowired(required = true)，则返回@Autowired+默认构造方法
	
没有@Autowire标记的构造方法：
	* 只有一个造方法
		* 有参构造方法：返回
		* 无参构造方法：
			* 主构造方法：  返回主构造方法
			* 非主构造方法： 返回null
			
	* 有两个构造方法：
		* 主构造方法 + 默认构造方法
		* 
		* 主构造方法 != 默认构造方法： 返回 2个
		
	* 其它情况：返回null
	
		
如果有@Autowired(required = true)标记的构造方法，则返回被@Autowired(required = true)标记的构造方法，
否则返回@Autowired(required = false)的构造方法，如果被@Autowired(required = false)标记的构造方法有多个，则尽可能选择参数更多的构造方法
如果没有被@Autowired标记的构造方法，则返回Primary/default构造方法，因为如果这时候有多个构造方法，spring不知道使用哪个构造方法，所以只能使用默认的构造方法


验证构造方法如果是 0 1 1、 0 1 1 3的情况







BeanReference
	以抽象公开的方式对bean名称的引用。这个接口并不是对实际bean的引用，只是对bean名称的逻辑引用。
	常用实现RuntimeBeanReference、RuntimeBeanNameReference

RuntimeBeanReference： 
	属性值对象的不可变占位符类，对工厂中另一个bean的引用，在运行时解析。
	在注册bd的时候，如果有个bd的参数依赖了一个容器中的bean，这时在bd中的引用就是用的这个类。
	BeanDefinitionValueResolver的方法resolveValueIfNecessary能够解析该名称对应的bean。

RuntimeBeanNameReference
	属性值对象的不可变占位符类，对工厂中另一个bean的引用，在运行时解析。
	解析出来是个bean的名称，使用场景很少，作用只是校验beanFactory中是否有这么一个bean。

TypeConverter
BeanDefinitionValueResolver


所有的bd最后都会合并为rootBd

getBeanNamesForType

查看bd的合并代码，什么时候会触发合并bd？

















工作区时长统计：
reportServer/userTimeStat/queryWorkFenceTimeStat
参数：startDate
	  endDate
	  structureId
	  
返回值：
{
	data:{
		"围栏1"： [
			ViolationStatPO
		]
	}
}



	  













